# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:43:22+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query
from pydantic import conint

from models import (
    Alt,
    Pool,
    PoolsDeleteRequest,
    PoolsListResponse,
    Replica,
    ReplicasDeleteRequest,
    ReplicasListResponse,
    Template,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com'},
    description='The Replica Pool API allows users to declaratively provision and manage groups of Google Compute Engine instances based on a common template.',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='Replica Pool',
    version='v1beta1',
    servers=[{'url': 'https://www.googleapis.com/replicapool/v1beta1/projects'}],
)


@app.get(
    '/{projectName}/zones/{zone}/pools',
    description=""" List all replica pools. """,
    tags=['replica_pool_management', 'individual_replica_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replicapool_pools_list(
    project_name: str = Path(..., alias='projectName'),
    zone: str = ...,
    max_results: Optional[conint(ge=0, le=1000)] = Query(500, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = 'json',
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{projectName}/zones/{zone}/pools',
    description=""" Inserts a new replica pool. """,
    tags=['replica_pool_management', 'individual_replica_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replicapool_pools_insert(
    project_name: str = Path(..., alias='projectName'),
    zone: str = ...,
    alt: Optional[Alt] = 'json',
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Pool = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{projectName}/zones/{zone}/pools/{poolName}',
    description=""" Gets information about a single replica pool. """,
    tags=['replica_pool_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replicapool_pools_get(
    project_name: str = Path(..., alias='projectName'),
    zone: str = ...,
    pool_name: str = Path(..., alias='poolName'),
    alt: Optional[Alt] = 'json',
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{projectName}/zones/{zone}/pools/{poolName}',
    description=""" Deletes a replica pool. """,
    tags=['replica_pool_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replicapool_pools_delete(
    project_name: str = Path(..., alias='projectName'),
    zone: str = ...,
    pool_name: str = Path(..., alias='poolName'),
    alt: Optional[Alt] = 'json',
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: PoolsDeleteRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{projectName}/zones/{zone}/pools/{poolName}/replicas',
    description=""" Lists all replicas in a pool. """,
    tags=['replica_pool_management', 'individual_replica_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replicapool_replicas_list(
    project_name: str = Path(..., alias='projectName'),
    zone: str = ...,
    pool_name: str = Path(..., alias='poolName'),
    max_results: Optional[conint(ge=0, le=1000)] = Query(500, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    alt: Optional[Alt] = 'json',
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}',
    description=""" Gets information about a specific replica. """,
    tags=['replica_pool_management', 'individual_replica_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replicapool_replicas_get(
    project_name: str = Path(..., alias='projectName'),
    zone: str = ...,
    pool_name: str = Path(..., alias='poolName'),
    replica_name: str = Path(..., alias='replicaName'),
    alt: Optional[Alt] = 'json',
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}',
    description=""" Deletes a replica from the pool. """,
    tags=['individual_replica_management', 'replica_pool_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replicapool_replicas_delete(
    project_name: str = Path(..., alias='projectName'),
    zone: str = ...,
    pool_name: str = Path(..., alias='poolName'),
    replica_name: str = Path(..., alias='replicaName'),
    alt: Optional[Alt] = 'json',
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: ReplicasDeleteRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}/restart',
    description=""" Restarts a replica in a pool. """,
    tags=['replica_pool_management', 'individual_replica_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replicapool_replicas_restart(
    project_name: str = Path(..., alias='projectName'),
    zone: str = ...,
    pool_name: str = Path(..., alias='poolName'),
    replica_name: str = Path(..., alias='replicaName'),
    alt: Optional[Alt] = 'json',
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{projectName}/zones/{zone}/pools/{poolName}/resize',
    description=""" Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be made. Replica Pools will use the information from the last resize request. """,
    tags=['replica_pool_management', 'individual_replica_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replicapool_pools_resize(
    project_name: str = Path(..., alias='projectName'),
    zone: str = ...,
    pool_name: str = Path(..., alias='poolName'),
    num_replicas: Optional[int] = Query(None, alias='numReplicas'),
    alt: Optional[Alt] = 'json',
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{projectName}/zones/{zone}/pools/{poolName}/updateTemplate',
    description=""" Update the template used by the pool. """,
    tags=['replica_pool_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replicapool_pools_updatetemplate(
    project_name: str = Path(..., alias='projectName'),
    zone: str = ...,
    pool_name: str = Path(..., alias='poolName'),
    alt: Optional[Alt] = 'json',
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Template = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
