# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:43:22+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class AccessConfig(BaseModel):
    name: Optional[str] = Field(None, description='Name of this access configuration.')
    natIp: Optional[str] = Field(
        None, description='An external IP address associated with this instance.'
    )
    type: Optional[str] = Field(
        None,
        description='Type of this access configuration file. Currently only ONE_TO_ONE_NAT is supported.',
    )


class DiskAttachment(BaseModel):
    deviceName: Optional[str] = Field(None, description='The device name of this disk.')
    index: Optional[int] = Field(
        None,
        description='A zero-based index to assign to this disk, where 0 is reserved for the boot disk. If not specified, this is assigned by the server.',
    )


class EnvVariable(BaseModel):
    hidden: Optional[bool] = Field(None, description='Deprecated, do not use.')
    name: Optional[str] = Field(
        None, description='The name of the environment variable.'
    )
    value: Optional[str] = Field(None, description='The value of the variable.')


class ExistingDisk(BaseModel):
    attachment: Optional[DiskAttachment] = Field(
        None, description='How the disk will be attached to the Replica.'
    )
    source: Optional[str] = Field(
        None,
        description='The name of the Persistent Disk resource. The Persistent Disk resource must be in the same zone as the Pool.',
    )


class HealthCheck(BaseModel):
    checkIntervalSec: Optional[int] = Field(
        None,
        description='How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5 seconds.',
    )
    description: Optional[str] = Field(
        None, description='The description for this health check.'
    )
    healthyThreshold: Optional[int] = Field(
        None,
        description='The number of consecutive health check requests that need to succeed before the replica is considered healthy again. The default value is 2.',
    )
    host: Optional[str] = Field(
        None,
        description='The value of the host header in the HTTP health check request. If left empty (default value), the localhost IP 127.0.0.1 will be used.',
    )
    name: Optional[str] = Field(None, description='The name of this health check.')
    path: Optional[str] = Field(
        None,
        description='The localhost request path to send this health check, in the format /path/to/use. For example, /healthcheck.',
    )
    port: Optional[int] = Field(
        None, description='The TCP port for the health check requests.'
    )
    timeoutSec: Optional[int] = Field(
        None,
        description='How long (in seconds) to wait before a timeout failure for this healthcheck. The default value is 5 seconds.',
    )
    unhealthyThreshold: Optional[int] = Field(
        None,
        description='The number of consecutive health check requests that need to fail in order to consider the replica unhealthy. The default value is 2.',
    )


class Label(BaseModel):
    key: Optional[str] = Field(None, description='The key for this label.')
    value: Optional[str] = Field(None, description='The value of this label.')


class MetadataItem(BaseModel):
    key: Optional[str] = Field(None, description='A metadata key.')
    value: Optional[str] = Field(None, description='A metadata value.')


class NetworkInterface(BaseModel):
    accessConfigs: Optional[List[AccessConfig]] = Field(
        None,
        description='An array of configurations for this interface. This specifies how this interface is configured to interact with other network services.',
    )
    network: Optional[str] = Field(
        None, description='Name the Network resource to which this interface applies.'
    )
    networkIp: Optional[str] = Field(
        None,
        description='An optional IPV4 internal network address to assign to the instance for this network interface.',
    )


class NewDiskInitializeParams(BaseModel):
    diskSizeGb: Optional[str] = Field(
        None, description='The size of the created disk in gigabytes.'
    )
    diskType: Optional[str] = Field(
        None,
        description="Name of the disk type resource describing which disk type to use to create the disk. For example 'pd-ssd' or 'pd-standard'. Default is 'pd-standard'",
    )
    sourceImage: Optional[str] = Field(
        None,
        description='The name or fully-qualified URL of a source image to use to create this disk. If you provide a name of the source image, Replica Pool will look for an image with that name in your project. If you are specifying an image provided by Compute Engine, you will need to provide the full URL with the correct project, such as:\nhttp://www.googleapis.com/compute/v1/projects/debian-cloud/ global/images/debian-wheezy-7-vYYYYMMDD',
    )


class PoolsDeleteRequest(BaseModel):
    abandonInstances: Optional[List[str]] = Field(
        None,
        description="If there are instances you would like to keep, you can specify them here. These instances won't be deleted, but the associated replica objects will be removed.",
    )


class ReplicaStatus(BaseModel):
    details: Optional[str] = Field(
        None,
        description='[Output Only] Human-readable details about the current state of the replica',
    )
    state: Optional[str] = Field(
        None, description='[Output Only] The state of the Replica.'
    )
    templateVersion: Optional[str] = Field(
        None, description='[Output Only] The template used to build the replica.'
    )
    vmLink: Optional[str] = Field(
        None,
        description='[Output Only] Link to the virtual machine that this Replica represents.',
    )
    vmStartTime: Optional[str] = Field(
        None,
        description='[Output Only] The time that this Replica got to the RUNNING state, in RFC 3339 format. If the start time is unknown, UNKNOWN is returned.',
    )


class ReplicasDeleteRequest(BaseModel):
    abandonInstance: Optional[bool] = Field(
        None,
        description='Whether the instance resource represented by this replica should be deleted or abandoned. If abandoned, the replica will be deleted but the virtual machine instance will remain. By default, this is set to false and the instance will be deleted along with the replica.',
    )


class ServiceAccount(BaseModel):
    email: Optional[str] = Field(
        None,
        description='The service account email address, for example: 123845678986@project.gserviceaccount.com',
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='The list of OAuth2 scopes to obtain for the service account, for example: https://www.googleapis.com/auth/devstorage.full_control',
    )


class Tag(BaseModel):
    fingerPrint: Optional[str] = Field(
        None,
        description='The fingerprint of the tag. Required for updating the list of tags.',
    )
    items: Optional[List[str]] = Field(None, description='Items contained in this tag.')


class Alt(Enum):
    json = 'json'


class Action(BaseModel):
    commands: Optional[List[str]] = Field(
        None,
        description='A list of commands to run, one per line. If any command fails, the whole action is considered a failure and no further actions are run. This also marks the virtual machine or replica as a failure.',
    )
    envVariables: Optional[List[EnvVariable]] = Field(
        None,
        description='A list of environment variables to use for the commands in this action.',
    )
    timeoutMilliSeconds: Optional[int] = Field(
        None,
        description="If an action's commands on a particular replica do not finish in the specified timeoutMilliSeconds, the replica is considered to be in a FAILING state. No efforts are made to stop any processes that were spawned or created as the result of running the action's commands. The default is the max allowed value, 1 hour (i.e. 3600000 milliseconds).",
    )


class Metadata(BaseModel):
    fingerPrint: Optional[str] = Field(
        None,
        description='The fingerprint of the metadata. Required for updating the metadata entries for this instance.',
    )
    items: Optional[List[MetadataItem]] = Field(
        None, description='A list of metadata items.'
    )


class NewDisk(BaseModel):
    attachment: Optional[DiskAttachment] = Field(
        None, description='How the disk will be attached to the Replica.'
    )
    autoDelete: Optional[bool] = Field(
        None,
        description='If true, then this disk will be deleted when the instance is deleted. The default value is true.',
    )
    boot: Optional[bool] = Field(
        None, description='If true, indicates that this is the root persistent disk.'
    )
    initializeParams: Optional[NewDiskInitializeParams] = Field(
        None,
        description='Create the new disk using these parameters. The name of the disk will be <instance_name>-<four_random_charactersgt;.',
    )


class Replica(BaseModel):
    name: Optional[str] = Field(
        None, description='[Output Only] The name of the Replica object.'
    )
    selfLink: Optional[str] = Field(
        None, description='[Output Only] The self-link of the Replica.'
    )
    status: Optional[ReplicaStatus] = Field(
        None, description='[Output Only] Last known status of the Replica.'
    )


class ReplicasListResponse(BaseModel):
    nextPageToken: Optional[str] = None
    resources: Optional[List[Replica]] = None


class VmParams(BaseModel):
    baseInstanceName: Optional[str] = Field(
        None, description='Deprecated. Please use baseInstanceName instead.'
    )
    canIpForward: Optional[bool] = Field(
        None,
        description='Enables IP Forwarding, which allows this instance to receive packets destined for a different IP address, and send packets with a different source IP. See IP Forwarding for more information.',
    )
    description: Optional[str] = Field(
        None, description='An optional textual description of the instance.'
    )
    disksToAttach: Optional[List[ExistingDisk]] = Field(
        None,
        description='A list of existing Persistent Disk resources to attach to each replica in the pool. Each disk will be attached in read-only mode to every replica.',
    )
    disksToCreate: Optional[List[NewDisk]] = Field(
        None,
        description='A list of Disk resources to create and attach to each Replica in the Pool. Currently, you can only define one disk and it must be a root persistent disk. Note that Replica Pool will create a root persistent disk for each replica.',
    )
    machineType: Optional[str] = Field(
        None,
        description='The machine type for this instance. The resource name (e.g. n1-standard-1).',
    )
    metadata: Optional[Metadata] = Field(
        None, description='The metadata key/value pairs assigned to this instance.'
    )
    networkInterfaces: Optional[List[NetworkInterface]] = Field(
        None,
        description='A list of network interfaces for the instance. Currently only one interface is supported by Google Compute Engine, ONE_TO_ONE_NAT.',
    )
    onHostMaintenance: Optional[str] = None
    serviceAccounts: Optional[List[ServiceAccount]] = Field(
        None, description='A list of Service Accounts to enable for this instance.'
    )
    tags: Optional[Tag] = Field(
        None,
        description='A list of tags to apply to the Google Compute Engine instance to identify resources.',
    )


class Template(BaseModel):
    action: Optional[Action] = Field(
        None,
        description='An action to run during initialization of your replicas. An action is run as shell commands which are executed one after the other in the same bash shell, so any state established by one command is inherited by later commands.',
    )
    healthChecks: Optional[List[HealthCheck]] = Field(
        None,
        description='A list of HTTP Health Checks to configure for this replica pool and all virtual machines in this replica pool.',
    )
    version: Optional[str] = Field(
        None,
        description='A free-form string describing the version of this template. You can provide any versioning string you would like. For example, version1 or template-v1.',
    )
    vmParams: Optional[VmParams] = Field(
        None,
        description='The virtual machine parameters to use for creating replicas. You can define settings such as the machine type and the image of replicas in this pool. This is required if replica type is SMART_VM.',
    )


class Pool(BaseModel):
    autoRestart: Optional[bool] = Field(
        None,
        description='Whether replicas in this pool should be restarted if they experience a failure. The default value is true.',
    )
    baseInstanceName: Optional[str] = Field(
        None,
        description='The base instance name to use for the replicas in this pool. This must match the regex [a-z]([-a-z0-9]*[a-z0-9])?. If specified, the instances in this replica pool will be named in the format <base-instance-name>-<ID>. The <ID> postfix will be a four character alphanumeric identifier generated by the service.\n\nIf this is not specified by the user, a random base instance name is generated by the service.',
    )
    currentNumReplicas: Optional[int] = Field(
        None, description='[Output Only] The current number of replicas in the pool.'
    )
    description: Optional[str] = Field(
        None, description='An optional description of the replica pool.'
    )
    healthChecks: Optional[List[HealthCheck]] = Field(
        None, description='Deprecated. Please use template[].healthChecks instead.'
    )
    initialNumReplicas: Optional[int] = Field(
        None,
        description='The initial number of replicas this pool should have. You must provide a value greater than or equal to 0.',
    )
    labels: Optional[List[Label]] = Field(
        None,
        description='A list of labels to attach to this replica pool and all created virtual machines in this replica pool.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the replica pool. Must follow the regex [a-z]([-a-z0-9]*[a-z0-9])? and be 1-28 characters long.',
    )
    numReplicas: Optional[int] = Field(
        None, description='Deprecated! Use initial_num_replicas instead.'
    )
    resourceViews: Optional[List[str]] = Field(
        None,
        description='The list of resource views that should be updated with all the replicas that are managed by this pool.',
    )
    selfLink: Optional[str] = Field(
        None, description='[Output Only] A self-link to the replica pool.'
    )
    targetPool: Optional[str] = Field(
        None, description='Deprecated, please use target_pools instead.'
    )
    targetPools: Optional[List[str]] = Field(
        None,
        description='A list of target pools to update with the replicas that are managed by this pool. If specified, the replicas in this replica pool will be added to the specified target pools for load balancing purposes. The replica pool must live in the same region as the specified target pools. These values must be the target pool resource names, and not fully qualified URLs.',
    )
    template: Optional[Template] = Field(
        None,
        description='The template to use when creating replicas in this pool. This template is used during initial instance creation of the pool, when growing the pool in size, or when a replica restarts.',
    )
    type: Optional[str] = Field(None, description='Deprecated! Do not set.')


class PoolsListResponse(BaseModel):
    nextPageToken: Optional[str] = None
    resources: Optional[List[Pool]] = None
